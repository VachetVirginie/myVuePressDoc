{"remainingRequest":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/vivi./Dev/myVuePressDoc/docs/php/spaceship.md?vue&type=template&id=6941a5d0&","dependencies":[{"path":"/Users/vivi./Dev/myVuePressDoc/docs/php/spaceship.md","mtime":1634026513355},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js","mtime":1660115261629},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1660115261540}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"what-is-the-spaceship-operator-in-php-7\"><a class=\"header-anchor\" href=\"#what-is-the-spaceship-operator-in-php-7\" aria-hidden=\"true\">#</a> What is &lt;=&gt; (the 'Spaceship' Operator) in PHP 7?</h1>\n<p>The <code>&lt;=&gt;</code> (&quot;Spaceship&quot;) operator will offer combined comparison in that it will :</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>Return 0 if values on either side are equal\nReturn 1 if the value on the left is greater\nReturn -1 if the value on the right is greater\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The rules used by the combined comparison operator are the same as the currently used comparison operators by PHP viz. <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>&gt;=</code> and <code>&gt;</code>. Those who are from Perl or Ruby programming background may already be familiar with this new operator proposed for PHP7.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>   //Comparing Integers\n\n    echo 1 &lt;=&gt; 1; //output  0\n    echo 3 &lt;=&gt; 4; //output -1\n    echo 4 &lt;=&gt; 3; //output  1\n\n    //String Comparison\n\n    echo &quot;x&quot; &lt;=&gt; &quot;x&quot;; //output  0\n    echo &quot;x&quot; &lt;=&gt; &quot;y&quot;; //output -1\n    echo &quot;y&quot; &lt;=&gt; &quot;x&quot;; //output  1\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$things = [\n    [\n        &#39;foo&#39; =&gt; 5.5,\n        &#39;bar&#39; =&gt; &#39;abc&#39;\n    ],\n    [\n        &#39;foo&#39; =&gt; 7.7,\n        &#39;bar&#39; =&gt; &#39;xyz&#39;\n    ],\n    [\n        &#39;foo&#39; =&gt; 2.2,\n        &#39;bar&#39; =&gt; &#39;efg&#39;\n    ]\n];\n\n// Sort $things by &#39;foo&#39; property, ascending\nusort($things, function ($a, $b) {\n    return $a[&#39;foo&#39;] &lt;=&gt; $b[&#39;foo&#39;];\n});\n\n// Sort $things by &#39;bar&#39; property, descending\nusort($things, function ($a, $b) {\n    return $b[&#39;bar&#39;] &lt;=&gt; $a[&#39;bar&#39;];\n});\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}