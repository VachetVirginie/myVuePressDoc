{"remainingRequest":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/vivi./Dev/myVuePressDoc/docs/git/mescmdutiles.md?vue&type=template&id=b2c5fd4a&","dependencies":[{"path":"/Users/vivi./Dev/myVuePressDoc/docs/git/mescmdutiles.md","mtime":1634635352144},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js","mtime":1660115261629},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1660115261540}],"contextDependencies":[],"result":["var render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _vm._m(0);\n};\n\nvar staticRenderFns = [function () {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", {\n    staticClass: \"content\"\n  }, [_c(\"h1\", {\n    attrs: {\n      id: \"mes-cmd-utiles\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#mes-cmd-utiles\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Mes cmd utiles\")]), _c(\"h2\", {\n    attrs: {\n      id: \"get-working-directory-up-to-date\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#get-working-directory-up-to-date\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Get working directory up to date.\")]), _c(\"p\", [_vm._v(\"up =\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"git pull --rebase --prune $@ && git submodule update --init --recursive\\n\")])])]), _c(\"h2\", {\n    attrs: {\n      id: \"fix-pb-rebase-pr-de-collegues-avec-les-miennes\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#fix-pb-rebase-pr-de-collegues-avec-les-miennes\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Fix pb rebase (pr de collegues avec les miennes)\")]), _c(\"ol\", [_c(\"li\", [_vm._v(\"Git pull de master\")]), _c(\"li\", [_vm._v(\"git reset --soft HEAD~1\")]), _c(\"li\", [_vm._v(\"git stash\")]), _c(\"li\", [_vm._v(\"git rebase master\")]), _c(\"li\", [_vm._v(\"git stash pop\")]), _c(\"li\", [_vm._v('git commit -am \"message\"')]), _c(\"li\", [_vm._v(\"git push origin HEAD --force\")])]), _c(\"h2\", {\n    attrs: {\n      id: \"git-clean\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#git-clean\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" git-clean\")]), _c(\"ul\", [_c(\"li\", [_vm._v(\"Remove untracked files from the working tree\\nStep 1 is to show what will be deleted by using the -n option:\")])]), _c(\"h3\", {\n    attrs: {\n      id: \"print-out-the-list-of-files-which-will-be-removed-dry-run\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#print-out-the-list-of-files-which-will-be-removed-dry-run\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Print out the list of files which will be removed (dry run)\")]), _c(\"p\", [_vm._v(\"git clean -n\\nClean Step - beware: this will delete files:\")]), _c(\"h3\", {\n    attrs: {\n      id: \"delete-the-files-from-the-repository\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#delete-the-files-from-the-repository\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Delete the files from the repository\")]), _c(\"p\", [_vm._v(\"git clean -f\")]), _c(\"ul\", [_c(\"li\", [_vm._v(\"To remove directories, run git clean -f -d or git clean -fd\")]), _c(\"li\", [_vm._v(\"To remove ignored files, run git clean -f -X or git clean -fX\")]), _c(\"li\", [_vm._v(\"To remove ignored and non-ignored files, run git clean -f -x or git clean -fx\")]), _c(\"li\", [_vm._v(\"Note the case difference on the X for the two latter commands.\")])]), _c(\"p\", [_vm._v('If clean.requireForce is set to \"true\" (the default) in your configuration, one needs to specify -f otherwise nothing will actually happen.')]), _c(\"h2\", {\n    attrs: {\n      id: \"desindexer-fichiers\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#desindexer-fichiers\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Desindexer fichiers\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v('git rm -r --cached .\\ngit add .\\ngit commit -m \"Untracked files issue resolved to fix .gitignore\"\\n')])])]), _c(\"h2\", {\n    attrs: {\n      id: \"savoir-sur-quelle-branche-on-se-trouve\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#savoir-sur-quelle-branche-on-se-trouve\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Savoir sur quelle branche on se trouve\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"git branch --show-current\\n\")])])]), _c(\"h2\", {\n    attrs: {\n      id: \"simple-way-to-remove-untracked-files\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#simple-way-to-remove-untracked-files\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Simple Way to remove untracked files\")]), _c(\"p\", [_vm._v(\"To remove all untracked files, The simple way is to add all of them first and reset the repo as below\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"git add --all\\ngit reset --hard HEAD\\n\")])])]), _c(\"h2\", {\n    attrs: {\n      id: \"delete-all-merged-local-branches\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#delete-all-merged-local-branches\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" Delete all merged local branches\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v('git branch --merged | egrep -v \"(^\\\\*|master|dev)\" | xargs git branch -d\\n')])])]), _c(\"h2\", {\n    attrs: {\n      id: \"how-to-remove-local-untracked-files-from-the-current-git-branch\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#how-to-remove-local-untracked-files-from-the-current-git-branch\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" How to remove local untracked files from the current Git branch\")]), _c(\"p\", [_vm._v(\"If you want to see which files will be deleted you can use the \"), _c(\"code\", [_vm._v(\"-n\")]), _vm._v(\" option before you run the actual command:\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"git clean -n\\n\")])])]), _c(\"p\", [_vm._v(\"Then when you are comfortable (because it will delete the files for real!) use the \"), _c(\"strong\", [_vm._v(\"-f\")]), _vm._v(\" option:\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"git clean -f\\n\")])])])]);\n}];\nrender._withStripped = true;\nexport { render, staticRenderFns };",{"version":3,"sources":["docs/git/mescmdutiles.md"],"names":["render","_vm","_c","_self","_m","staticRenderFns","staticClass","attrs","id","href","_v","pre","class","_withStripped"],"mappings":"AAAA,IAAIA,SAAS,SAASA,MAAT,GAAkB;AAC7B,MAAIC,MAAM,IAAV;AAAA,MACEC,KAAKD,IAAIE,KAAJ,CAAUD,EADjB;;AAEA,SAAOD,IAAIG,EAAJ,CAAO,CAAP,CAAP;AACD,CAJD;;AAKA,IAAIC,kBAAkB,CACpB,YAAY;AACV,MAAIJ,MAAM,IAAV;AAAA,MACEC,KAAKD,IAAIE,KAAJ,CAAUD,EADjB;;AAEA,SAAOA,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAsC,CAC3CJ,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAA8C,CAC5CN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AAAEE,YAAM,iBAAR;AAA2B,qBAAe;AAA1C;AAFT,GAFF,EAME,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CANF,CAD4C,EAS5CT,IAAIS,EAAJ,CAAO,iBAAP,CAT4C,CAA9C,CAD2C,EAY3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAgE,CAC9DN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,mCADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CAD8D,EAY9DT,IAAIS,EAAJ,CAAO,oCAAP,CAZ8D,CAAhE,CAZ2C,EA0B3CR,GAAG,GAAH,EAAQ,CAACD,IAAIS,EAAJ,CAAO,MAAP,CAAD,CAAR,CA1B2C,EA2B3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CACTD,IAAIS,EAAJ,CACE,2EADF,CADS,CAAX,CAD0D,CAA5D,CADkD,CAApD,CA3B2C,EAoC3CR,GACE,IADF,EAEE;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAFF,EAGE,CACEN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,iDADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CADF,EAYET,IAAIS,EAAJ,CAAO,mDAAP,CAZF,CAHF,CApC2C,EAsD3CR,GAAG,IAAH,EAAS,CACPA,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,oBAAP,CAAD,CAAT,CADO,EAEPR,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,yBAAP,CAAD,CAAT,CAFO,EAGPR,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,WAAP,CAAD,CAAT,CAHO,EAIPR,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,mBAAP,CAAD,CAAT,CAJO,EAKPR,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,eAAP,CAAD,CAAT,CALO,EAMPR,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,0BAAP,CAAD,CAAT,CANO,EAOPR,GAAG,IAAH,EAAS,CAACD,IAAIS,EAAJ,CAAO,8BAAP,CAAD,CAAT,CAPO,CAAT,CAtD2C,EA+D3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAyC,CACvCN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AAAEE,YAAM,YAAR;AAAsB,qBAAe;AAArC;AAFT,GAFF,EAME,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CANF,CADuC,EASvCT,IAAIS,EAAJ,CAAO,YAAP,CATuC,CAAzC,CA/D2C,EA0E3CR,GAAG,IAAH,EAAS,CACPA,GAAG,IAAH,EAAS,CACPD,IAAIS,EAAJ,CACE,8GADF,CADO,CAAT,CADO,CAAT,CA1E2C,EAiF3CR,GACE,IADF,EAEE;AACEK,WAAO;AACLC,UAAI;AADC;AADT,GAFF,EAOE,CACEN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,4DADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CADF,EAYET,IAAIS,EAAJ,CACE,8DADF,CAZF,CAPF,CAjF2C,EAyG3CR,GAAG,GAAH,EAAQ,CACND,IAAIS,EAAJ,CAAO,4DAAP,CADM,CAAR,CAzG2C,EA4G3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAoE,CAClEN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,uCADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CADkE,EAYlET,IAAIS,EAAJ,CAAO,uCAAP,CAZkE,CAApE,CA5G2C,EA0H3CR,GAAG,GAAH,EAAQ,CAACD,IAAIS,EAAJ,CAAO,cAAP,CAAD,CAAR,CA1H2C,EA2H3CR,GAAG,IAAH,EAAS,CACPA,GAAG,IAAH,EAAS,CACPD,IAAIS,EAAJ,CAAO,6DAAP,CADO,CAAT,CADO,EAIPR,GAAG,IAAH,EAAS,CACPD,IAAIS,EAAJ,CACE,+DADF,CADO,CAAT,CAJO,EASPR,GAAG,IAAH,EAAS,CACPD,IAAIS,EAAJ,CACE,+EADF,CADO,CAAT,CATO,EAcPR,GAAG,IAAH,EAAS,CACPD,IAAIS,EAAJ,CACE,gEADF,CADO,CAAT,CAdO,CAAT,CA3H2C,EA+I3CR,GAAG,GAAH,EAAQ,CACND,IAAIS,EAAJ,CACE,6IADF,CADM,CAAR,CA/I2C,EAoJ3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAmD,CACjDN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AAAEE,YAAM,sBAAR;AAAgC,qBAAe;AAA/C;AAFT,GAFF,EAME,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CANF,CADiD,EASjDT,IAAIS,EAAJ,CAAO,sBAAP,CATiD,CAAnD,CApJ2C,EA+J3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CACTD,IAAIS,EAAJ,CACE,qGADF,CADS,CAAX,CAD0D,CAA5D,CADkD,CAApD,CA/J2C,EAwK3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAsE,CACpEN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,yCADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CADoE,EAYpET,IAAIS,EAAJ,CAAO,yCAAP,CAZoE,CAAtE,CAxK2C,EAsL3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CAACD,IAAIS,EAAJ,CAAO,6BAAP,CAAD,CAAX,CAD0D,CAA5D,CADkD,CAApD,CAtL2C,EA2L3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAoE,CAClEN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,uCADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CADkE,EAYlET,IAAIS,EAAJ,CAAO,uCAAP,CAZkE,CAApE,CA3L2C,EAyM3CR,GAAG,GAAH,EAAQ,CACND,IAAIS,EAAJ,CACE,uGADF,CADM,CAAR,CAzM2C,EA8M3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CAACD,IAAIS,EAAJ,CAAO,wCAAP,CAAD,CAAX,CAD0D,CAA5D,CADkD,CAApD,CA9M2C,EAmN3CR,GAAG,IAAH,EAAS;AAAEK,WAAO;AAAEC,UAAI;AAAN;AAAT,GAAT,EAAgE,CAC9DN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,mCADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CAD8D,EAY9DT,IAAIS,EAAJ,CAAO,mCAAP,CAZ8D,CAAhE,CAnN2C,EAiO3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CACTD,IAAIS,EAAJ,CACE,4EADF,CADS,CAAX,CAD0D,CAA5D,CADkD,CAApD,CAjO2C,EA0O3CR,GACE,IADF,EAEE;AACEK,WAAO;AACLC,UAAI;AADC;AADT,GAFF,EAOE,CACEN,GACE,GADF,EAEE;AACEI,iBAAa,eADf;AAEEC,WAAO;AACLE,YAAM,kEADD;AAEL,qBAAe;AAFV;AAFT,GAFF,EASE,CAACR,IAAIS,EAAJ,CAAO,GAAP,CAAD,CATF,CADF,EAYET,IAAIS,EAAJ,CACE,kEADF,CAZF,CAPF,CA1O2C,EAkQ3CR,GAAG,GAAH,EAAQ,CACND,IAAIS,EAAJ,CACE,iEADF,CADM,EAINR,GAAG,MAAH,EAAW,CAACD,IAAIS,EAAJ,CAAO,IAAP,CAAD,CAAX,CAJM,EAKNT,IAAIS,EAAJ,CAAO,4CAAP,CALM,CAAR,CAlQ2C,EAyQ3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CAACD,IAAIS,EAAJ,CAAO,gBAAP,CAAD,CAAX,CAD0D,CAA5D,CADkD,CAApD,CAzQ2C,EA8Q3CR,GAAG,GAAH,EAAQ,CACND,IAAIS,EAAJ,CACE,qFADF,CADM,EAINR,GAAG,QAAH,EAAa,CAACD,IAAIS,EAAJ,CAAO,IAAP,CAAD,CAAb,CAJM,EAKNT,IAAIS,EAAJ,CAAO,UAAP,CALM,CAAR,CA9Q2C,EAqR3CR,GAAG,KAAH,EAAU;AAAEI,iBAAa;AAAf,GAAV,EAAoD,CAClDJ,GAAG,KAAH,EAAU;AAAES,SAAK,IAAP;AAAaJ,WAAO;AAAEK,aAAO;AAAT;AAApB,GAAV,EAA4D,CAC1DV,GAAG,MAAH,EAAW,CAACD,IAAIS,EAAJ,CAAO,gBAAP,CAAD,CAAX,CAD0D,CAA5D,CADkD,CAApD,CArR2C,CAAtC,CAAP;AA2RD,CA/RmB,CAAtB;AAiSAV,OAAOa,aAAP,GAAuB,IAAvB;AAEA,SAASb,MAAT,EAAiBK,eAAjB","sourceRoot":"/Users/vivi./Dev/myVuePressDoc","sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this,\n      _c = _vm._self._c\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"mes-cmd-utiles\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#mes-cmd-utiles\", \"aria-hidden\": \"true\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Mes cmd utiles\"),\n      ]),\n      _c(\"h2\", { attrs: { id: \"get-working-directory-up-to-date\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#get-working-directory-up-to-date\",\n              \"aria-hidden\": \"true\",\n            },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Get working directory up to date.\"),\n      ]),\n      _c(\"p\", [_vm._v(\"up =\")]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"git pull --rebase --prune $@ && git submodule update --init --recursive\\n\"\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\n        \"h2\",\n        { attrs: { id: \"fix-pb-rebase-pr-de-collegues-avec-les-miennes\" } },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href: \"#fix-pb-rebase-pr-de-collegues-avec-les-miennes\",\n                \"aria-hidden\": \"true\",\n              },\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\" Fix pb rebase (pr de collegues avec les miennes)\"),\n        ]\n      ),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"Git pull de master\")]),\n        _c(\"li\", [_vm._v(\"git reset --soft HEAD~1\")]),\n        _c(\"li\", [_vm._v(\"git stash\")]),\n        _c(\"li\", [_vm._v(\"git rebase master\")]),\n        _c(\"li\", [_vm._v(\"git stash pop\")]),\n        _c(\"li\", [_vm._v('git commit -am \"message\"')]),\n        _c(\"li\", [_vm._v(\"git push origin HEAD --force\")]),\n      ]),\n      _c(\"h2\", { attrs: { id: \"git-clean\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#git-clean\", \"aria-hidden\": \"true\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" git-clean\"),\n      ]),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\n            \"Remove untracked files from the working tree\\nStep 1 is to show what will be deleted by using the -n option:\"\n          ),\n        ]),\n      ]),\n      _c(\n        \"h3\",\n        {\n          attrs: {\n            id: \"print-out-the-list-of-files-which-will-be-removed-dry-run\",\n          },\n        },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href: \"#print-out-the-list-of-files-which-will-be-removed-dry-run\",\n                \"aria-hidden\": \"true\",\n              },\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\n            \" Print out the list of files which will be removed (dry run)\"\n          ),\n        ]\n      ),\n      _c(\"p\", [\n        _vm._v(\"git clean -n\\nClean Step - beware: this will delete files:\"),\n      ]),\n      _c(\"h3\", { attrs: { id: \"delete-the-files-from-the-repository\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#delete-the-files-from-the-repository\",\n              \"aria-hidden\": \"true\",\n            },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Delete the files from the repository\"),\n      ]),\n      _c(\"p\", [_vm._v(\"git clean -f\")]),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\"To remove directories, run git clean -f -d or git clean -fd\"),\n        ]),\n        _c(\"li\", [\n          _vm._v(\n            \"To remove ignored files, run git clean -f -X or git clean -fX\"\n          ),\n        ]),\n        _c(\"li\", [\n          _vm._v(\n            \"To remove ignored and non-ignored files, run git clean -f -x or git clean -fx\"\n          ),\n        ]),\n        _c(\"li\", [\n          _vm._v(\n            \"Note the case difference on the X for the two latter commands.\"\n          ),\n        ]),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          'If clean.requireForce is set to \"true\" (the default) in your configuration, one needs to specify -f otherwise nothing will actually happen.'\n        ),\n      ]),\n      _c(\"h2\", { attrs: { id: \"desindexer-fichiers\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#desindexer-fichiers\", \"aria-hidden\": \"true\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Desindexer fichiers\"),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              'git rm -r --cached .\\ngit add .\\ngit commit -m \"Untracked files issue resolved to fix .gitignore\"\\n'\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"h2\", { attrs: { id: \"savoir-sur-quelle-branche-on-se-trouve\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#savoir-sur-quelle-branche-on-se-trouve\",\n              \"aria-hidden\": \"true\",\n            },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Savoir sur quelle branche on se trouve\"),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"git branch --show-current\\n\")]),\n        ]),\n      ]),\n      _c(\"h2\", { attrs: { id: \"simple-way-to-remove-untracked-files\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#simple-way-to-remove-untracked-files\",\n              \"aria-hidden\": \"true\",\n            },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Simple Way to remove untracked files\"),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"To remove all untracked files, The simple way is to add all of them first and reset the repo as below\"\n        ),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"git add --all\\ngit reset --hard HEAD\\n\")]),\n        ]),\n      ]),\n      _c(\"h2\", { attrs: { id: \"delete-all-merged-local-branches\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#delete-all-merged-local-branches\",\n              \"aria-hidden\": \"true\",\n            },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Delete all merged local branches\"),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              'git branch --merged | egrep -v \"(^\\\\*|master|dev)\" | xargs git branch -d\\n'\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\n        \"h2\",\n        {\n          attrs: {\n            id: \"how-to-remove-local-untracked-files-from-the-current-git-branch\",\n          },\n        },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href: \"#how-to-remove-local-untracked-files-from-the-current-git-branch\",\n                \"aria-hidden\": \"true\",\n              },\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\n            \" How to remove local untracked files from the current Git branch\"\n          ),\n        ]\n      ),\n      _c(\"p\", [\n        _vm._v(\n          \"If you want to see which files will be deleted you can use the \"\n        ),\n        _c(\"code\", [_vm._v(\"-n\")]),\n        _vm._v(\" option before you run the actual command:\"),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"git clean -n\\n\")]),\n        ]),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"Then when you are comfortable (because it will delete the files for real!) use the \"\n        ),\n        _c(\"strong\", [_vm._v(\"-f\")]),\n        _vm._v(\" option:\"),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"git clean -f\\n\")]),\n        ]),\n      ]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}]}