{"remainingRequest":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js??ref--3-0!/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/vivi./Dev/myVuePressDoc/docs/php/spaceship.md?vue&type=template&id=6941a5d0&","dependencies":[{"path":"/Users/vivi./Dev/myVuePressDoc/docs/php/spaceship.md","mtime":1634026513355},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js","mtime":1660115261629},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1660115261540}],"contextDependencies":[],"result":["var render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _vm._m(0);\n};\n\nvar staticRenderFns = [function () {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", {\n    staticClass: \"content\"\n  }, [_c(\"h1\", {\n    attrs: {\n      id: \"what-is-the-spaceship-operator-in-php-7\"\n    }\n  }, [_c(\"a\", {\n    staticClass: \"header-anchor\",\n    attrs: {\n      href: \"#what-is-the-spaceship-operator-in-php-7\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"#\")]), _vm._v(\" What is <=> (the 'Spaceship' Operator) in PHP 7?\")]), _c(\"p\", [_vm._v(\"The \"), _c(\"code\", [_vm._v(\"<=>\")]), _vm._v(' (\"Spaceship\") operator will offer combined comparison in that it will :')]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"Return 0 if values on either side are equal\\nReturn 1 if the value on the left is greater\\nReturn -1 if the value on the right is greater\\n\\n\")])])]), _c(\"p\", [_vm._v(\"The rules used by the combined comparison operator are the same as the currently used comparison operators by PHP viz. \"), _c(\"code\", [_vm._v(\"<\")]), _vm._v(\", \"), _c(\"code\", [_vm._v(\"<=\")]), _vm._v(\", \"), _c(\"code\", [_vm._v(\"==\")]), _vm._v(\", \"), _c(\"code\", [_vm._v(\">=\")]), _vm._v(\" and \"), _c(\"code\", [_vm._v(\">\")]), _vm._v(\". Those who are from Perl or Ruby programming background may already be familiar with this new operator proposed for PHP7.\")]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v('   //Comparing Integers\\n\\n    echo 1 <=> 1; //output  0\\n    echo 3 <=> 4; //output -1\\n    echo 4 <=> 3; //output  1\\n\\n    //String Comparison\\n\\n    echo \"x\" <=> \"x\"; //output  0\\n    echo \"x\" <=> \"y\"; //output -1\\n    echo \"y\" <=> \"x\"; //output  1\\n\\n')])])]), _c(\"div\", {\n    staticClass: \"language- extra-class\"\n  }, [_c(\"pre\", {\n    pre: true,\n    attrs: {\n      class: \"language-text\"\n    }\n  }, [_c(\"code\", [_vm._v(\"$things = [\\n    [\\n        'foo' => 5.5,\\n        'bar' => 'abc'\\n    ],\\n    [\\n        'foo' => 7.7,\\n        'bar' => 'xyz'\\n    ],\\n    [\\n        'foo' => 2.2,\\n        'bar' => 'efg'\\n    ]\\n];\\n\\n// Sort $things by 'foo' property, ascending\\nusort($things, function ($a, $b) {\\n    return $a['foo'] <=> $b['foo'];\\n});\\n\\n// Sort $things by 'bar' property, descending\\nusort($things, function ($a, $b) {\\n    return $b['bar'] <=> $a['bar'];\\n});\\n\")])])])]);\n}];\nrender._withStripped = true;\nexport { render, staticRenderFns };",{"version":3,"sources":["docs/php/spaceship.md"],"names":["render","_vm","_c","_self","_m","staticRenderFns","staticClass","attrs","id","href","_v","pre","class","_withStripped"],"mappings":"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","sourceRoot":"/Users/vivi./Dev/myVuePressDoc","sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this,\n      _c = _vm._self._c\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"what-is-the-spaceship-operator-in-php-7\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#what-is-the-spaceship-operator-in-php-7\",\n              \"aria-hidden\": \"true\",\n            },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" What is <=> (the 'Spaceship' Operator) in PHP 7?\"),\n      ]),\n      _c(\"p\", [\n        _vm._v(\"The \"),\n        _c(\"code\", [_vm._v(\"<=>\")]),\n        _vm._v(\n          ' (\"Spaceship\") operator will offer combined comparison in that it will :'\n        ),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"Return 0 if values on either side are equal\\nReturn 1 if the value on the left is greater\\nReturn -1 if the value on the right is greater\\n\\n\"\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"The rules used by the combined comparison operator are the same as the currently used comparison operators by PHP viz. \"\n        ),\n        _c(\"code\", [_vm._v(\"<\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\"<=\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\"==\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\">=\")]),\n        _vm._v(\" and \"),\n        _c(\"code\", [_vm._v(\">\")]),\n        _vm._v(\n          \". Those who are from Perl or Ruby programming background may already be familiar with this new operator proposed for PHP7.\"\n        ),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              '   //Comparing Integers\\n\\n    echo 1 <=> 1; //output  0\\n    echo 3 <=> 4; //output -1\\n    echo 4 <=> 3; //output  1\\n\\n    //String Comparison\\n\\n    echo \"x\" <=> \"x\"; //output  0\\n    echo \"x\" <=> \"y\"; //output -1\\n    echo \"y\" <=> \"x\"; //output  1\\n\\n'\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"$things = [\\n    [\\n        'foo' => 5.5,\\n        'bar' => 'abc'\\n    ],\\n    [\\n        'foo' => 7.7,\\n        'bar' => 'xyz'\\n    ],\\n    [\\n        'foo' => 2.2,\\n        'bar' => 'efg'\\n    ]\\n];\\n\\n// Sort $things by 'foo' property, ascending\\nusort($things, function ($a, $b) {\\n    return $a['foo'] <=> $b['foo'];\\n});\\n\\n// Sort $things by 'bar' property, descending\\nusort($things, function ($a, $b) {\\n    return $b['bar'] <=> $a['bar'];\\n});\\n\"\n            ),\n          ]),\n        ]),\n      ]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}]}