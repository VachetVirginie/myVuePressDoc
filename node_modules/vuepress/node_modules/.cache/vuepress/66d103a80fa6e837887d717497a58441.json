{"remainingRequest":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/vivi./Dev/myVuePressDoc/docs/symfony/bestpracticessf4.md?vue&type=template&id=46df2e46&","dependencies":[{"path":"/Users/vivi./Dev/myVuePressDoc/docs/symfony/bestpracticessf4.md","mtime":1631613175244},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js","mtime":1660115261629},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1660115261540}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"best-practices-sf4\"><a class=\"header-anchor\" href=\"#best-practices-sf4\" aria-hidden=\"true\">#</a> best practices sf4</h1>\n<p>Symfony 4: Best Practices\nFabien Potencier\nApril 07, 2017</p>\n<p>Any major version of a project is an opportunity to revisit its best practices. Modernizing them. Adapting them to the project's new features. Symfony 4 is no exception.\nStandardization first</p>\n<p>Symfony 4 will be an evolution of the current practices, trying to embrace more standard tools.</p>\n<p>Symfony strives to embrace PHP and web standards. It is hard to believe that Symfony 2 started at a time when Composer did not exist. Since then, the PHP community started the Fig group, which adopted several recommendations. Symfony was one of the first major frameworks to adopt most of the PSRs, without breaking backward compatibility. PSR-3 for logging many years ago. PSR-4 for autoloading. More recently, PSR-6 for caching. The next version of Symfony, version 3.3, implements PSR-16 for caching and the brand new PSR-11 for containers interoperability. We might even have a use case for PSR-13.</p>\n<p>Using standards help with interoperability but also with decoupling your code from the framework.\nBundle-less Applications</p>\n<p>The move to bundle-less applications was explained in the previous blog post. I mention it here again as this is an important change in the current set of best practices.\nEnvironment Variables</p>\n<p>The current Symfony best practices book explains in great detail how to create configuration settings in a Symfony application. When to use app/config/parameters.yml for infrastructure-related configuration or app/config/config.yml for application-related configuration.</p>\n<p>I would go as far as recommending to avoid using app/config/config.yml as much as possible. There are valid use cases, but I can count them on one hand.</p>\n<p>Symfony 4 won't have the equivalent of app/config/parameters.yml. Use environment variables instead. This is what most frameworks do in other languages. This is also one of the recommendations of the 12-Factor Application Manifesto. One that is encouraged by many modern hosting platforms.</p>\n<p>Using environment variables, while far from being perfect, have many benefits over what we currently do. Environment variables are a more &quot;standard&quot; way of managing settings that depend on the environment (no need to manage a parameters.yml.dist for instance). Environment variables can be read by several applications as they are independent of your code, framework, and language. Environment variables help with read-only filesystem deployment as they are decoupled from your code. Environment variable values can be changed &quot;dynamically&quot; without redeploying your application (clearing the cache for Symfony). Last, but not least, environment variables can be managed by existing tools.</p>\n<p>Note that storing secrets in environment variables is not more &quot;secure&quot; than storing them in a configuration file.</p>\n<p>As using environment variables can be cumbersome in development, using a &quot;standard&quot; .env file is easier and recommended. Symfony 3.3 comes with a new Dotenv component that will be used by default in Symfony 4 applications. Switching between a .env file and &quot;real&quot; environment variables will be done automatically and transparently.</p>\n<p>Note that you can also define environment variables in a parameters.yaml file if that feels better to you. That won't be the recommended way though. Note that parameters.yaml is not a typo of parameters.yml! This is another change in Symfony 4 which will be discussed in a later article.</p>\n<p>As a nice side effect, it helps simplify how the Symfony environment and debug flag are handled by both console and web applications.</p>\n<p>Currently, the Symfony console tool can take the environment and the debug flag via the --env and --no-debug flags. Or alternatively via the SYMFONY_ENV and SYMFONY_DEBUG environment variables.</p>\n<p>With Symfony 4, this is no longer needed. APP_ENV and APP_DEBUG can be used for both the web front controller and the console tool.</p>\n<p>No more ./bin/console foo:bar --env=prod --no-debug or SYMFONY_ENV=prod SYMFONY_DEBUG=0 ./bin/console foo:bar. Just use ./bin/console foo:bar.</p>\n<p>It just works. In development and on production servers.</p>\n<p>Symfony 4 is full of such simplifications.\nUnified Web Front Controller</p>\n<p>Symfony 3 has two web front controllers. One optimized for production. One optimized for development. Symfony 4 only uses one. No need to remove the development web front controller anymore. No more security issue if you forget.</p>\n<p>You would think that the code is more complex than before. This is not even the case as we were able to remove a lot of &quot;legacy&quot; code. Thanks to environment variables. Thanks to PHP 7 and the removal of the bootstrap and class caches. Thanks to Symfony 3.3 which removes the need for a specific autoloader.\nMakefile</p>\n<p>Many projects have some custom scripts: a wrapper to run unit or integration tests, a script that runs the PHP built-in server, and more. Scripts for which writing a Symfony console command would not make sense.</p>\n<p>For convenience, you might have defined them in your application composer.json file. Silex does that with a script entry that runs the PHP built-in server. But that comes with many problems like timeouts or non-support for ANSI escape codes.</p>\n<p>Centralizing commands helps with discoverability though. What about using a Makefile instead? This is perhaps the most controversial feature of Symfony 4. I went back and forth. But I'm convinced it brings a lot of value and help solve some issues.</p>\n<p>make is a well-known &quot;standard&quot; tool. It is more powerful than scripts run by Composer. It does not rely on PHP. Use it to ease deployment, to connect to remote servers via SSH, to run Blackfire test scenarii. Use it to run npm, gulp, webpack, you named it. Tasks where using Symfony commands is not practical nor desirable.</p>\n<p>Profit from executing recipes in parallel. Don't run tasks if nothing changed. Make is powerful.</p>\n<p>Let's take one example, cache clearing. Symfony has a command to clear and warmup the cache. Doing both in the same process does not work well as PHP can not reload a class if it changed. But this is easy to achieve with make:</p>\n<p>cache-clear:\n@test -f bin/console &amp;&amp; bin/console cache:clear --no-warmup || rm -rf var/cache/*\n.PHONY: cache-clear</p>\n<p>cache-warmup: cache-clear\n@test -f bin/console &amp;&amp; bin/console cache:warmup || echo &quot;cannot warmup the cache (needs symfony/console)&quot;\n.PHONY: cache-warmup</p>\n<p>As another example, most of my PHP projects have two tasks that help run Blackfire tests:</p>\n<p>bf-dev:\nblackfire-player --endpoint=http://<code>bin/console server:status --filter=address</code> run tests/bkf/all.bkf\n.PHONY: bf-dev</p>\n<p>bf-prod:\nblackfire-player --endpoint=https://twig.sensiolabs.org run tests/bkf/all.bkf --variable=&quot;env=prod&quot;\n.PHONY: bf-prod</p>\n<p>Want to switch to an application to &quot;maintenance&quot; mode? Use make, not a Symfony command.\nAssets Management</p>\n<p>Assetic was removed in Symfony Standard Edition 3.0. We currently don't recommend any replacements as the JavaScript world is still working on a &quot;standard&quot; tool. But Symfony 4 will make a recommendation and provide some deep integration. More on that in a few weeks. Still, I wanted to mention it as we also support assets being symlinks/copied from bundles to web/bundles/ via assets:install, but that's probably something that won't survive Symfony 5. Especially as we have a bundle-less application structure now.</p>\n<p>Supporting the new best practices has some impact on the directory structure, which next post's topic. Stay tuned!</p>\n</div>\n",null]}