{"remainingRequest":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/vivi./Dev/myVuePressDoc/docs/git/gitcommandesdebase.md?vue&type=template&id=03535491&","dependencies":[{"path":"/Users/vivi./Dev/myVuePressDoc/docs/git/gitcommandesdebase.md","mtime":1631613175240},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js","mtime":1660115261629},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1660115261540}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"gitcommandesdebase\"><a class=\"header-anchor\" href=\"#gitcommandesdebase\" aria-hidden=\"true\">#</a> gitcommandesdebase</h1>\n<p><img src=\"https://clipart.info/images/ccovers/1499794873github-logo-png.png\" alt=\"Git\"></p>\n<h2 id=\"git-config\"><a class=\"header-anchor\" href=\"#git-config\" aria-hidden=\"true\">#</a> Git config</h2>\n<p>L'une des commandes git les plus utilisées est git config. On l'utilise pour configurer les préférences de l'utilisateur : son mail, l'algorithme utilisé pour diff, le nom d'utilisateur et le format de fichier etc. Par exemple, la commande suivante peut être utilisée pour définir le mail d'un utilisateur:</p>\n<p>git config --global user.email sam@google.com</p>\n<h2 id=\"acceder-a-ma-config\"><a class=\"header-anchor\" href=\"#acceder-a-ma-config\" aria-hidden=\"true\">#</a> Acceder à ma config</h2>\n<p>git config -l</p>\n<h2 id=\"git-init\"><a class=\"header-anchor\" href=\"#git-init\" aria-hidden=\"true\">#</a> Git init</h2>\n<p>Cette commande est utilisée pour créer un nouveau dépôt GIT :</p>\n<p>git init</p>\n<h2 id=\"git-add\"><a class=\"header-anchor\" href=\"#git-add\" aria-hidden=\"true\">#</a> Git add</h2>\n<p>La commande git add peut être utilisée pour ajouter des fichiers à l'index. Par exemple, la commande suivante ajoutera un fichier nommé temp.txt dans le répertoire local de l'index:</p>\n<p>git add temp.txt</p>\n<h2 id=\"clone-git\"><a class=\"header-anchor\" href=\"#clone-git\" aria-hidden=\"true\">#</a> Clone git</h2>\n<p>La commande git clone est utilisée pour la vérification des dépôts. Si le dépôt se trouve sur un serveur distant, utilisez:</p>\n<p>git clone alex@93.188.160.58:/chemin/vers/dépôt</p>\n<p>Inversement, si une copie de travail d'un dépôt local doit être créée, utilisez:</p>\n<p>git clone /chemin/vers/dépôt</p>\n<h2 id=\"git-commit\"><a class=\"header-anchor\" href=\"#git-commit\" aria-hidden=\"true\">#</a> Git commit</h2>\n<p>La commande git commit permet de valider les modifications apportées au HEAD. Notez que tout commit ne se fera pas dans le dépôt distant.</p>\n<p>git commit --m &quot;Description du commit&quot;</p>\n<h2 id=\"git-status\"><a class=\"header-anchor\" href=\"#git-status\" aria-hidden=\"true\">#</a> Git status</h2>\n<p>La commande git status affiche la liste des fichiers modifiés ainsi que les fichiers qui doivent encore être ajoutés ou validés. Usage:</p>\n<p>git status</p>\n<h2 id=\"git-push\"><a class=\"header-anchor\" href=\"#git-push\" aria-hidden=\"true\">#</a> Git push</h2>\n<p>Git push est une autre commandes GIT de base. Un simple push envoie les modifications locales apportées à la branche principale associée :</p>\n<p>git push origin master</p>\n<h2 id=\"git-checkout\"><a class=\"header-anchor\" href=\"#git-checkout\" aria-hidden=\"true\">#</a> Git checkout</h2>\n<p>La commande git checkout peut être utilisée pour créer des branches ou pour basculer entre elles. Par exemple nous allons créer une branche:</p>\n<p>command git checkout -b <nom-branche></p>\n<p>Pour passer simplement d'une branche à une autre, utilisez:</p>\n<p>git checkout <nom-branche></p>\n<p>## Git remote</p>\n<p>La commande git remote permet à un utilisateur de se connecter à un dépôt distant. La commande suivante répertorie les dépôts distants actuellement configurés:</p>\n<p>git remote --v</p>\n<p>Cette commande permet à l'utilisateur de connecter le dépôt local à un serveur distant:</p>\n<p>git remote add origin &lt;93.188.160.58&gt;</p>\n<h2 id=\"branche-git\"><a class=\"header-anchor\" href=\"#branche-git\" aria-hidden=\"true\">#</a> Branche git</h2>\n<p>La commande git branch peut être utilisée pour répertorier, créer ou supprimer des branches. Pour répertorier toutes les branches présentes dans le dépôt, utilisez:</p>\n<p>git branch</p>\n<p>Pour supprimer une branche:</p>\n<p>git branch --d <nom-branche></p>\n<p>## Git pull</p>\n<p>Pour fusionner toutes les modifications présentes sur le dépôt distant dans le répertoire de travail local, la commande pull est utilisée. Usage:</p>\n<p>git pull</p>\n<p>## Git merge</p>\n<p>La commande git merge est utilisée pour fusionner une branche dans la branche active. Usage:</p>\n<p>git merge <nom-branche></p>\n<p>## Git diff</p>\n<p>La commande git diff permet de lister les conflits. Pour visualiser les conflits d'un fichier, utilisez</p>\n<p>git diff --base <nom-fichier></p>\n<p>La commande suivante est utilisée pour afficher les conflits entre les branches à fusionner avant de les fusionner:</p>\n<p>git diff <branche-source> <branche-cible></p>\n<p>Pour simplement énumérer tous les conflits actuels, utilisez:</p>\n<p>git diff</p>\n<h2 id=\"git-tag\"><a class=\"header-anchor\" href=\"#git-tag\" aria-hidden=\"true\">#</a> Git tag</h2>\n<p>Le marquage est utilisé pour marquer des commits spécifiques avec des poignées simples. Un exemple peut être:</p>\n<p>git tag 1.1.0 <insert-commitID-here></p>\n<h2 id=\"git-log\"><a class=\"header-anchor\" href=\"#git-log\" aria-hidden=\"true\">#</a> Git log</h2>\n<p>L' exécution de la commande git log génère le log d'une branche. Un exemple de sortie :</p>\n<p>commit 15f4b6c44b3c8344caasdac9e4be13246e21sadw</p>\n<p>Author: Alex Hunter <a href=\"mailto:alexh@gmail.com\">alexh@gmail.com</a></p>\n<p>Date: Mon Oct 1 12:56:29 2016 -0600</p>\n<p>## Git reset</p>\n<p>Pour réinitialiser l'index et le répertoire de travail à l'état du dernier commit, la commande git reset est utilisée :</p>\n<p>git reset --hard HEAD</p>\n<p>Git rm</p>\n<p>Git rm peut être utilisé pour supprimer des fichiers de l'index et du répertoire de travail. Usage:</p>\n<p>git rm nomfichier.txt</p>\n<p>## Git stash</p>\n<p>L'une des moins connues, git stash aide à enregistrer les changements qui ne doivent pas être commit immédiatement. C'est un commit temporaire. Usage:</p>\n<p>git stash</p>\n<h2 id=\"git-show\"><a class=\"header-anchor\" href=\"#git-show\" aria-hidden=\"true\">#</a> Git show</h2>\n<p>Pour afficher des informations sur tout fichier git, utilisez la commande git show . Par exemple:</p>\n<p>git show</p>\n<p>## Git fetch</p>\n<p>Git fetch permet à un utilisateur d'extraire tous les fichiers du dépôt distant qui ne sont pas actuellement dans le répertoire de travail local. Exemple d'utilisation:</p>\n<p>git fetch origin</p>\n<p>## Git ls-tree</p>\n<p>Pour afficher un fichier arborescent avec le nom et le mode de chaque élément, et la valeur SHA-1 du blob, utilisez la commande git ls-tree . Par exemple:</p>\n<p>git ls-tree HEAD</p>\n<p>## Git cat-file</p>\n<p>À l'aide de la valeur SHA-1, affichez le type d'un fichier à l'aide de la commande git cat-file . Par exemple:</p>\n<p>git cat-file --p d670460b4b4aece5915caf5c68d12f560a9fe3e4</p>\n<h2 id=\"git-grep\"><a class=\"header-anchor\" href=\"#git-grep\" aria-hidden=\"true\">#</a> Git grep</h2>\n<p>Git grep permet à un utilisateur de rechercher dans les arbres de contenu des expressions et / ou des mots. Par exemple, pour rechercher www.hostinger.com dans tous les fichiers, utilisez:</p>\n<p>git grep &quot;www.hostinger.com&quot;</p>\n<p>## Gitk</p>\n<p>Gitk est l'interface graphique du dépôt local. Vous pouvez l'appeler en exécutant:</p>\n<p>gitk</p>\n<h2 id=\"git-instaweb\"><a class=\"header-anchor\" href=\"#git-instaweb\" aria-hidden=\"true\">#</a> Git instaweb</h2>\n<p>Avec la commande git instaweb , un serveur Web peut être exécuté par interface avec le dépôt local. Qui redirige directement vers un serveur web. Par exemple:</p>\n<p>git instaweb --httpd=webrick</p>\n<h2 id=\"git-gc\"><a class=\"header-anchor\" href=\"#git-gc\" aria-hidden=\"true\">#</a> Git gc</h2>\n<p>Pour optimiser le dépôt en supprimant les fichiers inutiles et les optimiser, utilisez:</p>\n<p>git gc</p>\n<p>git archive</p>\n<p>La commande git archive permet à un utilisateur de créer un fichier zip ou tar contenant les composants d'un arbre du dépôt. Par exemple:</p>\n<p>git archive --format=tar master</p>\n<h2 id=\"git-prune\"><a class=\"header-anchor\" href=\"#git-prune\" aria-hidden=\"true\">#</a> Git prune</h2>\n<p>Via la commande git prune , les fichiers qui n'ont pas de pointeurs entrants seront supprimés. Usage:</p>\n<p>git prune</p>\n<h2 id=\"git-fsck\"><a class=\"header-anchor\" href=\"#git-fsck\" aria-hidden=\"true\">#</a> Git fsck</h2>\n<p>Pour effectuer une vérification d'intégrité du système de fichiers git, utilisez la commande git fsck . Tous les fichiers corrompus seront identifiés:</p>\n<p>git fsck</p>\n<p>## Git rebase</p>\n<p>La commande git rebase est utilisée pour la réapplication des commits sur une autre branche. Par exemple:</p>\n<p>git rebase master</p>\n<p>Aller sur master\ngit checkout master\ngit pull origin HEAD\ngit checkout -\ngit rebase master</p>\n</div>\n",null]}