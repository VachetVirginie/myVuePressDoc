{"remainingRequest":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/vivi./Dev/myVuePressDoc/docs/docker/commandesdebases.md?vue&type=template&id=180757ec&","dependencies":[{"path":"/Users/vivi./Dev/myVuePressDoc/docs/docker/commandesdebases.md","mtime":1631613175239},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/babel-loader/lib/index.js","mtime":1660115261629},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/cache-loader/dist/cjs.js","mtime":1660115262090},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vue-loader/lib/index.js","mtime":1660115262578},{"path":"/Users/vivi./Dev/myVuePressDoc/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1660115261540}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"commandesdebases\"><a class=\"header-anchor\" href=\"#commandesdebases\" aria-hidden=\"true\">#</a> commandesdebases</h1>\n<blockquote>\n<p>An image is a read-only template with instructions for creating a Docker container.docs.docker.com/engine/docker-overview/#docker-objects</p>\n</blockquote>\n<blockquote>\n<p>A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.docs.docker.com/engine/reference/builder/</p>\n</blockquote>\n<blockquote>\n<p>A container is a runnable instance of an image. You can create, start, stop, move, or delete a container. A container is a process which runs on a host. ...the container process that runs is isolated in that it has its own file system, its own networking, and its own isolated process tree separate from the host.docs.docker.com/engine/docker-overview/#docker-objects, docs.docker.com/engine/reference/run/</p>\n</blockquote>\n<h2 id=\"listing\"><a class=\"header-anchor\" href=\"#listing\" aria-hidden=\"true\">#</a> Listing</h2>\n<ul>\n<li>List images:<br>\n<code>[docker image ls](https://docs.docker.com/engine/reference/commandline/image_ls/)</code><br>\n--- OR ---<br>\n<code>[docker images](https://docs.docker.com/engine/reference/commandline/images/)</code></li>\n<li>List containers:<br>\n<code>[docker container ls -a](https://docs.docker.com/engine/reference/commandline/container_ls/)</code><br>\n--- OR ---<br>\n<code>[docker ps -a](https://docs.docker.com/engine/reference/commandline/ps/)</code></li>\n<li>List volumes:<br>\n<code>[docker volume ls](https://docs.docker.com/engine/reference/commandline/volume_ls/)</code></li>\n<li>List networks:<br>\n<code>[docker network ls](https://docs.docker.com/engine/reference/commandline/network_ls/)</code></li>\n<li>List all containers (Compose):<br>\n<code>[docker-compose ps](https://www.saltycrane.com/cheat-sheets/docker/)</code></li>\n</ul>\n<h2 id=\"removing\"><a class=\"header-anchor\" href=\"#removing\" aria-hidden=\"true\">#</a> Removing</h2>\n<ul>\n<li>Remove a container:<br>\n<code>[docker rm my_container](https://docs.docker.com/engine/reference/commandline/rm/)</code></li>\n<li>Remove all stopped containers:<br>\n<code>[docker container prune](https://docs.docker.com/engine/reference/commandline/container_prune/)</code></li>\n<li>Remove an image:<br>\n<code>[docker image rm my-image](https://docs.docker.com/engine/reference/commandline/image_rm/)</code><br>\n--- OR ---<br>\n<code>[docker rmi my-image](https://docs.docker.com/engine/reference/commandline/rmi/)</code></li>\n<li>Remove dangling images:<br>\n<code>[docker image prune](https://docs.docker.com/engine/reference/commandline/image_prune/)</code></li>\n<li>Remove all images:<br>\n<code>[docker image prune -a](https://docs.docker.com/engine/reference/commandline/image_prune/)</code></li>\n<li>Remove a volume:<br>\n<code>[docker volume rm my_volume](https://docs.docker.com/engine/reference/commandline/volume_rm/)</code></li>\n<li>Remove all volumes:<br>\n<code>[docker volume prune](https://docs.docker.com/engine/reference/commandline/volume_prune/)</code></li>\n<li>Stop and remove containers and networks in <code>docker-compose.yml</code>. (This does not remove volumes.)<br>\n<code>[docker-compose down](https://docs.docker.com/compose/reference/down/)</code></li>\n<li>Remove everything:<br>\n<strong>Preferences -&gt; Uninstall / Reset -&gt; Reset to factory defaults</strong></li>\n</ul>\n<h2 id=\"pulling-images\"><a class=\"header-anchor\" href=\"#pulling-images\" aria-hidden=\"true\">#</a> Pulling images</h2>\n<ul>\n<li>Pull and image from the Docker registry (<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">hub.docker.com<OutboundLink/></a>):<br>\n<code>[docker pull my-image](https://docs.docker.com/engine/reference/commandline/pull/)</code></li>\n</ul>\n<h2 id=\"publishing-images\"><a class=\"header-anchor\" href=\"#publishing-images\" aria-hidden=\"true\">#</a> Publishing images</h2>\n<p>See also: <a href=\"https://docs.docker.com/get-started/part2/#share-your-image\" target=\"_blank\" rel=\"noopener noreferrer\">Get started with Docker - Share you image<OutboundLink/></a></p>\n<ul>\n<li>Login to the Docker registry (<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">hub.docker.com<OutboundLink/></a>):<br>\n<code>[docker login](https://docs.docker.com/engine/reference/commandline/login/)</code></li>\n<li>Tag an image:<br>\n<code>[docker tag my-image my-username/my-repo:my-tag](https://docs.docker.com/engine/reference/commandline/tag/)</code></li>\n<li>Push an image to the Docker registry:<br>\n<code>[docker push my-username/my-repo:my-tag](https://docs.docker.com/engine/reference/commandline/push/)</code></li>\n</ul>\n<h2 id=\"building-images-from-dockerfiles\"><a class=\"header-anchor\" href=\"#building-images-from-dockerfiles\" aria-hidden=\"true\">#</a> Building images from Dockerfiles</h2>\n<ul>\n<li>Build an image from a Dockerfile in the current directory:<br>\n<code>[docker build -t my-image .](https://docs.docker.com/engine/reference/commandline/build/)</code></li>\n<li>Build an image using a differently-named Dockerfile:<br>\n<code>[docker build -f Dockerfile-other -t my-image .](https://docs.docker.com/engine/reference/commandline/build/)</code></li>\n<li>Rebuild all images (Compose):<br>\n<code>[docker-compose build](https://docs.docker.com/compose/reference/build/)</code></li>\n<li>Rebuild a specific image (Compose):<br>\n<code>[docker-compose build my_service](https://docs.docker.com/compose/reference/build/)</code>\n<ul>\n<li>where <code>my_service</code> is one of the services listed in the <code>docker-compose.yml</code> file</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"creating-containers\"><a class=\"header-anchor\" href=\"#creating-containers\" aria-hidden=\"true\">#</a> Creating containers</h2>\n<ul>\n<li>Create a new container from an image:<br>\n<code>[docker create my-image](https://docs.docker.com/engine/reference/commandline/create/)</code></li>\n<li>Build new images and create all containers (Compose). (This will not rebuild images if a Dockerfile changes.) <code>[docker-compose up --no-start](https://docs.docker.com/compose/reference/up/)</code></li>\n</ul>\n<h2 id=\"starting-stopping-containers\"><a class=\"header-anchor\" href=\"#starting-stopping-containers\" aria-hidden=\"true\">#</a> Starting / stopping containers</h2>\n<ul>\n<li>Start a container:<br>\n<code>[docker start my_container](https://docs.docker.com/engine/reference/commandline/start/)</code></li>\n<li>Stop a container:<br>\n<code>[docker stop my_container](https://docs.docker.com/engine/reference/commandline/stop/)</code></li>\n<li>Start all containers (Compose):<br>\n<code>[docker-compose start](https://docs.docker.com/compose/reference/start/)</code></li>\n<li>Stop all containers (Compose):<br>\n<code>[docker-compose stop](https://docs.docker.com/compose/reference/stop/)</code></li>\n</ul>\n<h2 id=\"running-containers\"><a class=\"header-anchor\" href=\"#running-containers\" aria-hidden=\"true\">#</a> Running containers</h2>\n<p><code>docker run</code> is a combination of (optionally) <code>docker pull</code>, <code>docker create</code>, and <code>docker start</code>. See also <a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker run reference<OutboundLink/></a>.</p>\n<ul>\n<li>Create a container from <code>my-image</code>, and run the default command:<br>\n<code>[docker run my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Run the <code>echo</code> command in the container instead of the default command:<br>\n<code>[docker run my-image echo &quot;hello&quot;](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Run container in the background:<br>\n<code>[docker run -d my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Run and remove the container after it exits:<br>\n<code>[docker run --rm my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Create a container from <code>my-image</code>, named <code>my_container</code>, and start it:<br>\n<code>[docker run --name my_container my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Run a container, setting an environment variable in the container:<br>\n<code>[docker run --env MY_ENVIRONMENT_VAR=myvalue my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Build new images, create all containers, and start all containers (Compose). (This will not rebuild images if a Dockerfile changes.)<br>\n<code>[docker-compose up](https://docs.docker.com/compose/reference/up/)</code></li>\n<li>Build, create, and start all in the background (Compose):<br>\n<code>[docker-compose up -d](https://docs.docker.com/compose/reference/up/)</code></li>\n<li><em>Rebuild all images</em>, create all containers, and start all containers (Compose):<br>\n<code>[docker-compose up --build](https://docs.docker.com/compose/reference/up/)</code></li>\n<li>Create a new container for <code>my_service</code> in <code>docker-compose.yml</code> and run the <code>echo</code> command instead of the specified command:<br>\n<code>[docker-compose run my_service echo &quot;hello&quot;](https://docs.docker.com/compose/reference/run/)</code></li>\n</ul>\n<h2 id=\"volumes\"><a class=\"header-anchor\" href=\"#volumes\" aria-hidden=\"true\">#</a> volumes</h2>\n<ul>\n<li>Run a container with a volume named <code>my_volume</code> mounted at <code>/my/path</code> in the Docker container. (The volume will be created if it doesn't already exist.) See the <a href=\"https://docs.docker.com/storage/volumes/\" target=\"_blank\" rel=\"noopener noreferrer\">Volumes documentation<OutboundLink/></a> for more information.<br>\n<code>[docker run --mount source=my_volume,target=/my/path my-image](https://docs.docker.com/engine/reference/commandline/run/)</code><br>\n--- OR ---<br>\n<code>[docker run -v my_volume:/my/path my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Copy all data from a volume named <code>my_volume_1</code> to a volume named <code>my_volume_2</code> by running the <code>cp</code> command in a temporary container created from a <code>debian</code> image^<a href=\"https://www.saltycrane.com/cheat-sheets/docker/#footnote-1\" target=\"_blank\" rel=\"noopener noreferrer\">1<OutboundLink/></a>^:<br>\n<code>[docker run --rm -it -v my_volume_1:/from -v my_volume_2:/to debian bash -c &quot;cp -av /from/. /to&quot;](https://docs.docker.com/engine/reference/commandline/run/)</code><br>\n--- OR ---<br>\nusing <code>rsync</code> (after installing it first):<br>\n<code>[docker run --rm -it -v my_volume_1:/from -v my_volume_2:/to debian bash -c &quot;apt update &amp;&amp; apt install -y rsync &amp;&amp; rsync -avz /from/ /to/&quot;](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n</ul>\n<h2 id=\"ports-networking\"><a class=\"header-anchor\" href=\"#ports-networking\" aria-hidden=\"true\">#</a> ports &amp; networking</h2>\n<ul>\n<li>Run and bind port 80 inside Docker to port 9090 on the host (outside Docker):<br>\n<code>[docker run -p 9090:80 my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Run and access <code>localhost</code> on the host (outside Docker) using the special DNS name <code>host.docker.internal</code>. Requires Docker 18.03 or greater. (Before 18.03, <code>docker.for.mac.localhost</code> was available on Mac only.) See <a href=\"https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds<OutboundLink/></a><br>\n<code>[docker run my-image ping host.docker.internal](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n<li>Create a network:<br>\n<code>[docker network create my_network](https://docs.docker.com/engine/reference/commandline/network_create/)</code><br>\nRun a container using a network:<br>\n<code>[docker run --network=my_network my-image](https://docs.docker.com/engine/reference/commandline/run/)</code></li>\n</ul>\n<h2 id=\"interacting-with-containers\"><a class=\"header-anchor\" href=\"#interacting-with-containers\" aria-hidden=\"true\">#</a> Interacting with containers</h2>\n<ul>\n<li>Interact with a running container using bash:<br>\n<code>[docker exec -it my_container bash](https://docs.docker.com/engine/reference/commandline/exec/)</code></li>\n<li>Show logs for a container:<br>\n<code>[docker logs -f my_container](https://docs.docker.com/engine/reference/commandline/logs/)</code></li>\n<li>Copy <code>my-file.txt</code> from the host current directory to the <code>/tmp</code> directory in <code>my_container</code>:<br>\n<code>[docker cp ./my-file.txt my_container:/tmp/my-file.txt](https://docs.docker.com/engine/reference/commandline/cp/)</code></li>\n<li>Interact with a running container using bash (Compose):<br>\n<code>[docker-compose exec my_service bash](https://docs.docker.com/compose/reference/logs/)</code></li>\n<li>Show all logs (Compose):<br>\n<code>[docker-compose logs -f](https://docs.docker.com/compose/reference/logs/)</code></li>\n</ul>\n<h2 id=\"getting-information\"><a class=\"header-anchor\" href=\"#getting-information\" aria-hidden=\"true\">#</a> Getting information</h2>\n<ul>\n<li>Show the Docker version:<br>\n<code>[docker version](https://docs.docker.com/engine/reference/commandline/version/)</code></li>\n<li>Show the commands used to build an image:<br>\n<code>[docker history my-image](https://docs.docker.com/engine/reference/commandline/history/)</code></li>\n<li>Show I/O, CPU, and Memory usage for a container:<br>\n<code>[docker stats my_container](https://docs.docker.com/engine/reference/commandline/container_stats/)</code></li>\n<li>Show files that have changed in a container:<br>\n<code>[docker diff my_container](https://docs.docker.com/engine/reference/commandline/container_diff/)</code></li>\n<li>Show running processes in a container:<br>\n<code>[docker top my_container](https://docs.docker.com/engine/reference/commandline/top/)</code></li>\n<li>Show a JSON blob of information about a image, container, volume, etc:<br>\n<code>[docker inspect my-image</code><br>\n<code>docker inspect my_container</code>](https://docs.docker.com/engine/reference/commandline/inspect/)<br>\netc.</li>\n<li>Show all running processes (Compose):<br>\n<code>[docker-compose top](https://docs.docker.com/compose/reference/top/)</code></li>\n<li><code>docker-compose</code> commands are shaded in gray. They assume a <code>docker-compose.yml</code> file in the current directory.</li>\n</ul>\n</div>\n",null]}