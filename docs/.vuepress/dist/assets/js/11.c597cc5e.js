(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{355:function(e,t,n){"use strict";n.r(t);var i=n(43),r=Object(i.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"commandes-de-base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commandes-de-base"}},[this._v("#")]),this._v(" Commandes de base")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[this._v('# Git config.\nL’une des commandes git les plus utilisées est git config. On l’utilise pour configurer les préférences de l’utilisateur : son mail, l’algorithme utilisé pour diff, le nom d’utilisateur et le format de fichier etc. Par exemple, la commande suivante peut être utilisée pour définir le mail d’un utilisateur:\n\ngit config --global user.email sam@google.com\n\nGit init\nCette commande est utilisée pour créer un nouveau dépôt GIT :\n\ngit init\n\nGit add\nLa commande git add peut être utilisée pour ajouter des fichiers à l’index. Par exemple, la commande suivante ajoutera un fichier nommé temp.txt dans le répertoire local de l’index:\n\ngit add temp.txt\n\nClone git\nLa commande git clone est utilisée pour la vérification des dépôts. Si le dépôt se trouve sur un serveur distant, utilisez:\n\ngit clone alex@93.188.160.58:/chemin/vers/dépôt\n\nInversement, si une copie de travail d’un dépôt local doit être créée, utilisez:\n\ngit clone /chemin/vers/dépôt\n\nGit commit\nLa commande git commit permet de valider les modifications apportées au HEAD. Notez que tout commit ne se fera pas dans le dépôt distant.\n\ngit commit –m “Description du commit”\n\nGit status\nLa commande git status affiche la liste des fichiers modifiés ainsi que les fichiers qui doivent encore être ajoutés ou validés. Usage:\n\ngit status\n\nGit push\nGit push est une autre commandes GIT de base. Un simple push envoie les modifications locales apportées à la branche principale associée :\n\ngit push origin master\n\nGit checkout\nLa commande git checkout peut être utilisée pour créer des branches ou pour basculer entre elles. Par exemple nous allons créer une branche:\n\ncommand git checkout -b <nom-branche>\n\nPour passer simplement d’une branche à une autre, utilisez:\n\ngit checkout <nom-branche>\n\nGit remote\nLa commande git remote permet à un utilisateur de se connecter à un dépôt distant. La commande suivante répertorie les dépôts distants actuellement configurés:\n\ngit remote –v\n\nCette commande permet à l’utilisateur de connecter le dépôt local à un serveur distant:\n\ngit remote add origin <93.188.160.58>\n\nBranche git\nLa commande git branch peut être utilisée pour répertorier, créer ou supprimer des branches. Pour répertorier toutes les branches présentes dans le dépôt, utilisez:\n\ngit branch\n\nPour supprimer une branche:\n\ngit branch –d <nom-branche>\n\nGit pull\nPour fusionner toutes les modifications présentes sur le dépôt distant dans le répertoire de travail local, la commande pull est utilisée. Usage:\n\ngit pull\n\nGit merge\nLa commande git merge est utilisée pour fusionner une branche dans la branche active. Usage:\n\ngit merge <nom-branche>\n\nGit diff\nLa commande git diff permet de lister les conflits. Pour visualiser les conflits d’un fichier, utilisez\n\ngit diff --base <nom-fichier>\n\nLa commande suivante est utilisée pour afficher les conflits entre les branches à fusionner avant de les fusionner:\n\ngit diff <branche-source> <branche-cible>\n\nPour simplement énumérer tous les conflits actuels, utilisez:\n\ngit diff\n\nGit tag\nLe marquage est utilisé pour marquer des commits spécifiques avec des poignées simples. Un exemple peut être:\n\ngit tag 1.1.0 <insert-commitID-here>\n\nGit log\nL’ exécution de la commande git log génère le log d’une branche. Un exemple de sortie :\n\ncommit 15f4b6c44b3c8344caasdac9e4be13246e21sadw \nAuthor: Alex Hunter <alexh@gmail.com> \nDate: Mon Oct 1 12:56:29 2016 -0600\n\nGit reset\nPour réinitialiser l’index et le répertoire de travail à l’état du dernier commit, la commande git reset est utilisée :\n\ngit reset --hard HEAD\n\nGit rm\nGit rm peut être utilisé pour supprimer des fichiers de l’index et du répertoire de travail. Usage:\n\ngit rm nomfichier.txt\n\nGit stash\nL’une des moins connues, git stash aide à enregistrer les changements qui ne doivent pas être commit immédiatement. C’est un commit temporaire. Usage:\n\ngit stash\n\nGit show\nPour afficher des informations sur tout fichier git, utilisez la commande git show . Par exemple:\n\ngit show\n\nGit fetch\nGit fetch permet à un utilisateur d’extraire tous les fichiers du dépôt distant qui ne sont pas actuellement dans le répertoire de travail local. Exemple d’utilisation:\n\ngit fetch origin\n\nGit ls-tree\nPour afficher un fichier arborescent avec le nom et le mode de chaque élément, et la valeur SHA-1 du blob, utilisez la commande git ls-tree . Par exemple:\n\ngit ls-tree HEAD\n\nGit cat-file\nÀ l’aide de la valeur SHA-1, affichez le type d’un fichier à l’aide de la commande git cat-file . Par exemple:\n\ngit cat-file –p d670460b4b4aece5915caf5c68d12f560a9fe3e4\n\nGit grep\nGit grep permet à un utilisateur de rechercher dans les arbres de contenu des expressions et / ou des mots. Par exemple, pour rechercher www.hostinger.com dans tous les fichiers, utilisez:\n\ngit grep "www.hostinger.com"\n\nGitk\nGitk est l’interface graphique du dépôt local. Vous pouvez l’appeler en exécutant:\n\ngitk\n\nGit instaweb\nAvec la commande git instaweb , un serveur Web peut être exécuté par interface avec le dépôt local. Qui redirige directement vers un serveur web. Par exemple:\n\ngit instaweb –httpd=webrick\n\nGit gc\nPour optimiser le dépôt en supprimant les fichiers inutiles et les optimiser, utilisez:\n\ngit gc\n\ngit archive\nLa commande git archive permet à un utilisateur de créer un fichier zip ou tar contenant les composants d’un arbre du dépôt. Par exemple:\n\ngit archive --format=tar master\n\nGit prune\nVia la commande git prune , les fichiers qui n’ont pas de pointeurs entrants seront supprimés. Usage:\n\ngit prune\n\nGit fsck\nPour effectuer une vérification d’intégrité du système de fichiers git, utilisez la commande git fsck . Tous les fichiers corrompus seront identifiés:\n\ngit fsck\n\nGit rebase\nLa commande git rebase est utilisée pour la réapplication des commits sur une autre branche. Par exemple:\n\ngit rebase master')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);